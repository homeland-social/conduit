server {
    listen       80;
    server_name  localhost;

    location / {
        set $default /upstream;

        set_by_lua_block $upstream {
            local default = ngx.var.default;

            -- Get hostname:
            local host = ngx.req.get_headers()['Host']
            local host = host:match('([0-9%a%u-]+).shanty.local')
            local clients = ngx.shared.clients
            local conn = clients:get(host)

            if conn == nil then
                ngx.log(ngx.ERR, 'Could not lookup client: ' .. host)
                return default
            end

            return 'http://' .. conn
        }

        proxy_pass $upstream;
    }

    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/local/openresty/nginx/html;
    }

    location /local/add/ {
        lua_need_request_body on;

        content_by_lua_block {
            local os = require('os')
            local jwt = require('resty.jwt')
            local key = os.getenv('SECRET_KEY')
            local data = ngx.req.get_body_data()

            local obj = jwt:verify(key, data)
            if not obj['valid'] then
                ngx.log(ngx.ERR, 'JWT verification failed: '..obj['reason'])
                ngx.exit(400)
            end

            local payload = obj['payload']
            local clients = ngx.shared.clients

            if payload['username'] == nil then
                ngx.log(ngx.ERR, 'JWT does not contain username')
                ngx.exit(400)
            end
            if payload['host'] == nil or payload['port'] == nil then
                ngx.log(ngx.ERR, 'JWT does not contain host and port')
                ngx.exit(400)
            end

            -- Record client connection info.
            local conn = payload['host'] .. ':' .. payload['port']
            ngx.log(ngx.INFO, 'Registering client: ' .. payload['username'] .. ', conn=' .. conn)
            clients:set(payload['username'], conn)

            ngx.say('OK')
            ngx.exit(200)
        }
    }
}
